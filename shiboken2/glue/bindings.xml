<?xml version="1.0"?>
<typesystem package="foo">
    <load-typesystem name="typesystem_core.xml" generate="no" />
    <primitive-type name="int"/>
    <primitive-type name="std::string"/>

    <!-- <value-type name='TestBlog' /> -->
    <!-- <value-type name='Foo' /> -->
    <object-type name='TestBlog' />
    <object-type name='Foo' />
    <!-- <object-type name='Blog' /> -->
    <value-type name='Blog' />
    <!-- <object-type name="TActionContext" generate="no" /> -->
    <!-- <object-type name="TActionContext" /> -->
    <object-type name='Doo' >
    <!-- <modify-function signature="init2()"> -->
        <!-- <modify-argument index="0"> -->
        <!-- <define-ownership owner="c++"/> -->
        <!-- </modify-argument> -->
        <!-- </modify-function> -->
    </object-type>
    <!-- <value-type name="TWebApplication" /> -->
    <!-- <namespace-type name="ABQ" generate='no'> -->
    <!-- <object-type name='Counter' /> -->
    <!-- </namespace-type> -->
    <value-type name='IndexDay' />
    <object-type name='IndexDayAction' >
        <modify-function signature="getInstance()">
            <modify-argument index="0">
                <define-ownership owner="c++"/>
            </modify-argument>
        </modify-function>
    </object-type>
    <!-- <namespace-type name="hmdf" generate='no'> -->
    <!-- <namespace-type name="hmdf"> -->
    <!-- <value-type name="HeteroVector" /> -->
    <!-- </namespace-type> -->
    <value-type name="StockDay" />
    <object-type name='Xdxr' >
        <!-- <modify-function signature="getXdxr()"> -->
        <!-- <modify-argument index="0"> -->
        <!-- <define-ownership owner="c++"/> -->
        <!-- </modify-argument> -->
        <!-- </modify-function> -->
    </object-type>
    <value-type name='StockMin' />
    <object-type name='StockMinAction' >
        <modify-function signature="getInstance()">
            <modify-argument index="0">
                <define-ownership owner="c++"/>
            </modify-argument>
        </modify-function>
    </object-type>

    <!-- <container-type name="std::vector" type="vector">
         <include file-name="vector" location="global"/>
         <conversion-rule>
         <native-to-target>
         %INTYPE::size_type vectorSize = %in.size();
         PyObject* %out = PyList_New((int) vectorSize);
         for (%INTYPE::size_type idx = 0; idx &lt; vectorSize; ++idx) {
         %INTYPE_0 cppItem(%in[idx]);
         PyList_SET_ITEM(%out, idx, %CONVERTTOPYTHON[%INTYPE_0](cppItem));
         }
         return %out;
         </native-to-target>
         <target-to-native>
         <add-conversion type="PySequence">
         Shiboken::AutoDecRef seq(PySequence_Fast(%in, 0));
         int vectorSize = PySequence_Fast_GET_SIZE(seq.object());
         %out.reserve(vectorSize);
         for (int idx = 0; idx &lt; vectorSize; ++idx ) {
         PyObject* pyItem = PySequence_Fast_GET_ITEM(seq.object(), idx);
         %OUTTYPE_0 cppItem = %CONVERTTOCPP[%OUTTYPE_0](pyItem);
         %out.push_back(cppItem);
         }
         </add-conversion>
         </target-to-native>
         </conversion-rule>
         </container-type>
    -->
</typesystem>
